{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1LnKEP1nCne8V4U4dmBlgGRTx79GsTN5I","authorship_tag":"ABX9TyOv2ARIMjgjd+w6KU2/94yh"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"ZHBu1f6qJAB1","executionInfo":{"status":"ok","timestamp":1740353647410,"user_tz":-60,"elapsed":1230,"user":{"displayName":"Cubecrops","userId":"04881390433050695101"}}},"outputs":[],"source":["import glob\n","import os\n","import imageio.v2 as imageio\n","import pandas as pd\n","import numpy as np\n","import random\n","from datetime import datetime"]},{"cell_type":"code","source":["class HealthScoreSystem:\n","    def __init__(self):\n","        \"\"\"\n","        Initializes the health score system by:\n","        - Extracting average pigment values.\n","        - Fetching latest plant height from Google Drive data.\n","        - Determining the current growth day (temporal data).\n","        - Simulating biomass growth with a skewed distribution.\n","        \"\"\"\n","        self.pigment_values = self.get_average_pigments()\n","        self.plant_height = self.get_latest_plant_height()\n","        self.temporal_data = self.get_growth_day()\n","        self.biomass_growth = self.simulate_biomass_growth()\n","\n","        # Compute health score after gathering all parameters\n","        self.health_score = self.calculate_health_score()\n","\n","    def get_average_pigments(self):\n","        \"\"\"\n","        Calls the pigment analysis pipeline and retrieves the average pigment values.\n","        \"\"\"\n","        from pigment_analysis_script import visualize_pigment_analysis, analyze_pigment_predictions\n","\n","        avg_pigments = visualize_pigment_analysis()\n","        return avg_pigments  # Returns an array [Chl A, Chl B, Anthocyanins, Carotenoids]\n","\n","    def get_latest_plant_height(self):\n","        \"\"\"\n","        Retrieves the latest plant height from the Google Drive sensor data.\n","        \"\"\"\n","        folder_path = \"/content/drive/MyDrive/Plant_Height_Sensor/\"\n","        list_of_files = glob.glob(folder_path + \"*.csv\")\n","\n","        if not list_of_files:\n","            print(\"No height data found. Defaulting to None.\")\n","            return None\n","\n","        latest_file = max(list_of_files, key=os.path.getctime)\n","\n","        df = pd.read_csv(latest_file)\n","        df['timestamp'] = pd.to_datetime(df['timestamp'])\n","        df = df.sort_values(by='timestamp', ascending=False)\n","\n","        if len(df) >= 2:\n","            latest_heights = df.iloc[:2]['height'].tolist()\n","            avg_height = sum(latest_heights) / len(latest_heights)\n","        else:\n","            avg_height = df.iloc[0]['height']\n","\n","        return avg_height\n","\n","    def get_growth_day(self):\n","        \"\"\"\n","        Determines the current growth day based on the first image taken.\n","        Assumes the plant was 3 days old when the first image was taken.\n","        \"\"\"\n","        image_folder = \"/content/drive/MyDrive/Images/\"\n","        list_of_images = glob.glob(image_folder + \"*\")\n","\n","        if not list_of_images:\n","            print(\"No images found. Defaulting to day 3.\")\n","            return 3\n","\n","        first_image = min(list_of_images, key=os.path.getctime)\n","        first_image_time = os.path.getctime(first_image)\n","\n","        current_time = datetime.now().timestamp()\n","        days_since_first = (current_time - first_image_time) // (24 * 3600)\n","\n","        return 3 + int(days_since_first)\n","\n","    def simulate_biomass_growth(self):\n","        \"\"\"\n","        Simulates biomass growth due to broken sensor.\n","        \"\"\"\n","        if self.temporal_data <= 10:\n","            return np.random.normal(loc=8, scale=2)\n","        elif self.temporal_data <= 20:\n","            return np.random.normal(loc=14, scale=3)\n","        else:\n","            return np.random.normal(loc=20, scale=4)\n","\n","    def calculate_health_score(self):\n","        \"\"\"\n","        Computes an overall health score (0-100) based on:\n","        - Pigment balance (Chl A, Chl B, Anthocyanins, Carotenoids).\n","        - Expected vs actual plant height.\n","        - Temporal data (growth stage).\n","        - Biomass growth simulation.\n","        \"\"\"\n","        score = 100  # Start with full health\n","\n","        # Chlorophyll scoring (optimal range: Chl A: 5-12, Chl B: 2-6)\n","        if not (5 <= self.pigment_values[0] <= 12):\n","            score -= 10\n","        if not (2 <= self.pigment_values[1] <= 6):\n","            score -= 10\n","\n","        # Anthocyanins (optimal range: 0.5 - 2)\n","        if not (0.5 <= self.pigment_values[2] <= 2):\n","            score -= 10\n","\n","        # Carotenoids (optimal range: 0.1 - 0.4)\n","        if not (0.1 <= self.pigment_values[3] <= 0.4):\n","            score -= 10\n","\n","        # Expected plant height based on growth stage\n","        expected_height = self.temporal_data * 1.5  # Example: 1.5 cm per day\n","        height_difference = abs(self.plant_height - expected_height)\n","\n","        if height_difference > 5:\n","            score -= 15  # Large deviation from expected height\n","\n","        # Biomass growth simulation (expected range: 10-20 in mid stage)\n","        if self.temporal_data > 10 and not (10 <= self.biomass_growth <= 20):\n","            score -= 10\n","\n","        # Ensure the score is within 0-100\n","        score = max(0, min(100, score))\n","        return score\n","\n","    def get_health_parameters(self):\n","        \"\"\"\n","        Returns all collected plant health parameters and the health score.\n","        \"\"\"\n","        return {\n","            \"Chlorophyll A\": self.pigment_values[0],\n","            \"Chlorophyll B\": self.pigment_values[1],\n","            \"Anthocyanins\": self.pigment_values[2],\n","            \"Carotenoids\": self.pigment_values[3],\n","            \"Plant Height\": self.plant_height,\n","            \"Temporal Data (Growth Day)\": self.temporal_data,\n","            \"Biomass Growth\": self.biomass_growth,\n","            \"Health Score\": self.health_score,\n","        }\n"],"metadata":{"id":"j1-fh69rKQAp"},"execution_count":null,"outputs":[]}]}